---

#        - name: Check to see if the VM is present
#          vsphere_guest:
#            vcenter_hostname: "{{ vcenter_hostname }}"
#            username: '{{ vcenter_username }}'
#            password: '{{ vcenter_password }}'
#            guest: "{{ vm_name }}"
#            state: present

#        - name: Shut down the guest OS
#          vsphere_guest:
#            vcenter_hostname: "{{ vcenter_hostname }}"
#            username: '{{ vcenter_username }}'
#            password: '{{ vcenter_password }}'
#            guest: "{{ vm_name }}"
#            state: powered_off

- name: Generate random VM name
  command: openssl rand -base64 16 | sed -e 's/[^a-zA-Z0-9]//g'
  register: vm_name
  when: ephemeral_vm

- name: Add a private network NIC if doing Oracle RAC
  set_fact:
    vm_networks: "{{ vm_networks }} + {{ oracle_rac_private_nic }}"
  when: oracle_rac

- name: Disable virtual interrupt coalescing for private NIC
  set_fact:
    custom_values: "{{ custom_values }} + {{ interrupt_coalescing }}"
  when: oracle_rac

- name: Augment vApp properties with private NIC IP address
  set_fact:
      vapp_properties: "{{ vapp_properties }} + {{ private_nic_ip }}"
    when: oracle_rac

#- name: Delete the VM if it exists
#  vsphere_guest:
#    vcenter_hostname: "{{ vcenter_hostname }}"
#    username: '{{ vcenter_username }}'
#    password: '{{ vcenter_password }}'
#    guest: "{{ vm_name }}"
#    state: absent
#    force: yes

- name: Create the VM
  vmware_guest:
    validate_certs: "{{ validate_certs }}"
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    datacenter: "{{ vcenter_datacenter }}"
    cluster: "{{ vcenter_cluster }}"
    guest_id: "{{ guest_id }}"
    hardware: "{{ vm_hardware }}"
    folder: "{{ vm_folder|default(omit) }}"
    resource_pool: "{{ vm_resource_pool|default(omit) }}"
    disk:
      - size_gb: "{{ vm_disk_size_gb }}"
        type: "{{ vm_disk_type }}"
        datastore: "{{ vcenter_datastore }}"
    networks: "{{ vm_networks }}"
    name: "{{ vm_name }}"
    annotation: "{{ vm_annotation }}"
    customvalues: "{{ custom_values }}"
    vapp_properties: "{{ vapp_properties }}"
  delegate_to: localhost
  register: newvm

#- name: Manipulate vApp properties
#  vmware_guest:
#    hostname: 192.168.1.209
#    username: administrator@vsphere.local
#    password: vmware
#    name: vm_name
#    state: present
#    vapp_properties:
#      - id: remoteIP
#        category: Backup
#        label: Backup server IP
#        type: string
#        value: 10.10.10.1
#      - id: old_property
#        operation: remove

#- name: Gather VM facts
#  vsphere_guest:
#    vcenter_hostname: "{{ vcenter_hostname }}"
#    username: '{{ vcenter_username }}'
#    password: '{{ vcenter_password }}'
#    guest: "{{ vm_name }}"
#    vmware_guest_facts: yes
#  register: newvm
#  until: newvm|success
#  retries: 5
#  delay: 10

- name: All info
  debug:
    msg: "{{ newvm.ansible_facts }} {{ vm_name }}"

- name: Find the current date/time
  shell:
    cmd: date
  register: datetime

- name: Create a random bootloader password
  command: yes `openssl rand -base64 48` | grub2-mkpasswd-pbkdf2 | awk '/grub.pbkdf/{print$NF}'
  register: bootloader_pw
  when: randomize_bootloader_pw

- name: Create specific pxelinx.cfg for this machine's UUID: {{ newvm.ansible_facts.hw_product_uuid }}
  template:
    src: pxelinux.cfg.j2
    dest: "/var/lib/tftpboot/pxelinx.cfg/{{ newvm.ansible_facts.hw_product_uuid }}"
    mode: '0644'

- name: Create specific kickstart file
  template:
    src: pxeboot_ks.cfg.j2
    dest: /var/ftp/pub/{{ newvm.ansible_facts.hw_product_uuid }}_ks.cfg
    mode: '0644'

- name: Power on the VM
  vsphere_guest:
    vcenter_hostname: "{{ vcenter_hostname }}"
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    guest: "{{ vm_name }}"
    state: powered_on

- name: Wait a couple of minutes for OS to install and tools to start
  wait_for:
    timeout: 120
  changed_when: False
- name: Gather VM facts
  vsphere_guest:
    vcenter_hostname: "{{ vcenter_hostname }}"
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    guest: "{{ vm_name }}"
    vmware_guest_facts: yes
  register: newvm
  until: newvm.ansible_facts.hw_eth0.ipaddresses[0] is defined
  retries: 50
  delay: 10

- name: IP address info
  debug:
    msg: "{{ newvm.ansible_facts.hw_eth0.ipaddresses[0] }} {{ vm_name }}"

- name: Wait for ssh to be available
  wait_for:
    host: "{{ newvm.ansible_facts.hw_eth0.ipaddresses[0] }}"
    port: 22
    timeout: 600
    state: started

- name: add the new host to the ansible-playbook in-memory inventory
  add_host:
    name: "{{ newvm.ansible_facts.hw_eth0.ipaddresses[0] }}"
    groups: just_created

- name: Perform Oracle specific setup on the new host
  include: oracle_setup.yml
  when: inventory_hostname in groups ['just_created']

# http://www.firewalld.org/documentation/howto/add-a-service.html
# firewall-offline-cmd --new-service=myservice
# firewall-offline-cmd --service=service --set-description=description
# firewall-offline-cmd --service=service --set-short=description
# firewall-offline-cmd --service=service --add-port=portid[-portid]/protocol
# firewall-offline-cmd --service=service --add-protocol=protocol
# firewall-offline-cmd --service=service --add-source-port=portid[-portid]/protocol
# firewall-offline-cmd --service=service --add-module=module
# firewall-offline-cmd --service=service --set-destination=ipv:address[/mask]

